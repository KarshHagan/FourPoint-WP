// Generated by CoffeeScript 1.9.2
(function() {
  var _docReady;

  window.debug_enabled = true;

  $.CustomEvents = {
    SITE_INITIALIZED: "site_initialized",
    PRIMARY_NAV_CLICKED: "primary_nav_clicked",
    PRIMARY_NAV_HOVERED: "primary_nav_hovered",
    PRIMARY_NAV_HOVERED_OFF: "primary_nav_hovered_off",
    TOUCH_START: "touchstart",
    SHOW_MODAL: "show_modal",
    SECTION_CHANGE: "section_change",
    SUBNAV_CHANGE: "subnav_change",
    OPEN_MAP: "open_map",
    CLOSE_MAP: "close_map",
    PIN_ACTIVATED: "pin_activated"
  };

  window.custom_defaults = {
    mobileWidth: 480,
    iPadWidth: 768
  };

  $(function() {

    /**
    	 * Main controller for the site 
    	 * @param {string} objectName
    	 * @param {obj} @settings
     */
    $.fn.Site = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $me, _init, _initialize_plugins, _initialize_skinnable_form_elements, _resize, _scroll_to_section;
        $me = $(this);
        _scroll_to_section = function(section) {
          return $('html,body').animate({
            scrollTop: _default_section.position().top
          }, 0);
        };
        _init = function() {
          var _default_section, section;
          register($.Events.RESIZE, config.myName, _resize);
          _resize();
          trigger($.Events.INITIALIZE_DATASCRIPTS);
          trigger($.Events.SITE_INITIALIZED);
          debug("Initiating: " + config.myName);
          debug("Defaults:");
          if (window.location.hash) {
            section = $(window.location.hash);
            if (section.position()) {
              _default_section = section;
              _scroll_to_section();
              setTimeout(_scroll_to_section, 500);
            }
          }
          _initialize_plugins();
          return _initialize_skinnable_form_elements();
        };
        _initialize_plugins = function() {
          return debug("_initialize_plugins");
        };
        _initialize_skinnable_form_elements = function() {
          var skinnable_opts;
          skinnable_opts = {
            unchecked_image_src: "/wp-content/themes/mollys/assets/images/checkbox_unchecked.png",
            checked_image_src: "/wp-content/themes/mollys/assets/images/checkbox_checked.png"
          };
          return $(".gfield_checkbox li").SkinnableCheckbox("SkinnableCheckbox");
        };
        _resize = function() {};
        return _init();
      });
    };
    $.fn.CommunitiesMap = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $I, $me, _create_map, _init, _map, _map_options;
        $me = $I = $(this);
        _map = null;
        _map_options = {
          zoom: 12,
          center: '39.7498639,-105.0043823'
        };
        _create_map = function() {
          var map;
          debug("creating map");
          return map = new google.maps.Map(document.getElementById('communities-map'), _map_options);
        };
        _init = function() {
          debug("initializing communities map");
          return google.maps.event.addDomListener(window, 'load', _create_map);
        };
        return _init();
      });
    };
    $.fn.SubNav = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $I, $me, _init, _my_nav_items, _nav_item_click;
        $me = $I = $(this);
        config.my_page_name = $me.parents('.page-section').attr("id");
        config.my_page = $me.parents('.page-section');
        _my_nav_items = $me.find(".subnav-item");
        _nav_item_click = function(evt) {
          return evt.preventDefault();
        };
        _init = function() {
          return _my_nav_items.SubNavItem('SubNavItem', config);
        };
        return _init();
      });
    };
    $.fn.SubNavItem = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $I, $me, _init, _my_section, set_section;
        $me = $I = $(this);
        _my_section = config.my_page.find('#' + $me.attr("rel"));
        set_section = function(evt) {
          evt.preventDefault();
          config.my_page.find(".selected").removeClass("selected");
          _my_section.addClass("selected");
          debug("removing current-item class");
          $(".current-item").removeClass("current-item");
          $me.addClass("current-item");
          return trigger(_a.SUBNAV_CHANGE);
        };
        _init = function() {
          return $I.respond_to(_a.CLICK, set_section);
        };
        return _init();
      });
    };
    $.fn.MapTrigger = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $I, $me, _init, _on_click;
        $me = $I = $(this);
        _on_click = function(evt) {
          evt.preventDefault();
          return announce(_a.OPEN_MAP);
        };
        _init = function() {
          return $I.respond_to(_a.CLICK, _on_click);
        };
        return _init();
      });
    };
    $.fn.MobileTrigger = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $I, $me, _init, _on_click;
        $me = $I = $(this);
        _on_click = function(evt) {
          evt.preventDefault();
          return $('.header-container').toggleClass("open");
        };
        _init = function() {
          return $I.respond_to(_a.CLICK, _on_click);
        };
        return _init();
      });
    };
    $.fn.NavItem = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $I, $me, _init, _on_click, _section_name;
        $me = $I = $(this);
        _section_name = $me.attr("href").replace("#", "");
        _on_click = function(evt) {
          var section;
          evt.preventDefault();
          section = $("." + _section_name);
          return $('html,body').animate({
            scrollTop: section.offset().top
          }, 'slow');
        };
        _init = function() {
          return $I.respond_to(_a.CLICK, _on_click);
        };
        return _init();
      });
    };
    $.fn.Slider = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $I, $me, _init, _play_pause_slider;
        $me = $I = $(this);
        _play_pause_slider = function(evt, new_section) {
          if (new_section === "neighborhood") {
            return $me.find('.flexslider').flexslider("play");
          } else {
            return $me.find('.flexslider').flexslider("pause");
          }
        };
        _init = function() {
          var slider_opts;
          respond_to(_a.SECTION_CHANGE, _play_pause_slider);
          slider_opts = {
            animation: "fade",
            animationLoop: true,
            animationSpeed: 500,
            slideshowSpeed: 4500,
            itemWidth: '100%',
            itemMargin: 0,
            controlNav: true,
            prevText: "",
            nextText: "",
            slideshow: false
          };
          if ($me.data('namespace')) {
            slider_opts.namespace = $me.data('namespace');
          }
          if ($me.data('transition') === "slide") {
            slider_opts.animation = "slide";
          }
          if ($me.data('direction-nav') === "true") {
            slider_opts.directionNav === true;
          }
          return $me.find('.flexslider').flexslider(slider_opts);
        };
        return _init();
      });
    };
    $.fn.Area = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $I, $me, _init, _my_data, _on_click, _tooltip;
        $me = $I = $(this);
        _my_data = null;
        _tooltip = null;
        _on_click = function(evt) {
          var api;
          evt.preventDefault();
          api = _tooltip.qtip('api');
          api.toggle(false);
          return trigger(_a.SHOW_MODAL, _my_data);
        };
        _init = function() {
          var tooltip_options, tooltip_template;
          $I.respond_to(_a.CLICK, _on_click);
          _my_data = {
            title: $me.data('title'),
            style: $me.data('style'),
            price: $me.data('price'),
            bed_bath: $me.data('bed-bath'),
            sqft: $me.data('sqft'),
            status: $me.data('status'),
            floorplan_graphic: $me.data('floorplan-graphic'),
            floorplan_pdf: $me.data('floorplan-pdf'),
            download_name: $me.data('downloadname')
          };
          tooltip_template = $(".tooltip-template").clone();
          tooltip_template.find(".title").html(_my_data.title);
          tooltip_template.find(".style").html(_my_data.style);
          tooltip_template.find(".price").html(_my_data.price);
          tooltip_template.find(".bed-bath").html(_my_data.bed_bath);
          tooltip_template.find(".sqft").html(_my_data.sqft);
          tooltip_template.find(".tooltip-contents").addClass(_my_data.status);
          tooltip_options = {
            position: {
              my: 'bottom center',
              at: 'center center'
            },
            content: {
              text: tooltip_template.html()
            },
            hide: {
              fixed: true
            }
          };
          return _tooltip = $me.qtip(tooltip_options);
        };
        return _init();
      });
    };
    $.fn.UnitModal = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $I, $me, _close_button, _close_modal, _fade_modal, _init, _remove_modal, _show_modal;
        $me = $I = $(this);
        _close_button = $me.find(".close-button");
        _show_modal = function(evt, unit_data) {
          $me.find(".title").html(unit_data.title);
          $me.find(".style").html(unit_data.style);
          $me.find(".price").html(unit_data.price);
          $me.find(".bed-bath").html(unit_data.bed_bath);
          $me.find(".sqft").html(unit_data.sqft);
          $me.find(".modal-contents").addClass(unit_data.status);
          $me.find(".floorplan-graphic img").get(0).src = unit_data.floorplan_graphic;
          $me.find(".print-button").attr('href', unit_data.floorplan_pdf);
          $me.find(".download-button").attr('href', unit_data.floorplan_pdf);
          $me.find(".download-button").attr('download', unit_data.download_name);
          $me.find(".print-button").css("display", "block");
          $me.find(".download-button").css("display", "block");
          $me.addClass("shown");
          return setTimeout(_fade_modal, 100);
        };
        _remove_modal = function() {
          return $me.removeClass("shown");
        };
        _fade_modal = function() {
          return $me.addClass("fade-in");
        };
        _close_modal = function() {
          $me.removeClass("fade-in");
          return setTimeout(_remove_modal, 500);
        };
        _init = function() {
          respond_to(_a.SHOW_MODAL, _show_modal);
          return _close_button.respond_to(_a.CLICK, _close_modal);
        };
        return _init();
      });
    };
    return $.fn.Header = function(objectName, settings) {
      var $parent, config;
      this.settings = settings;
      $parent = $(this);
      if (typeof config === "undefined" || config === null) {
        config = {};
      }
      config.myName = objectName;
      if (this.settings != null) {
        jQuery.extend(config, this.settings);
      }
      return this.each(function(index) {
        var $me, _init;
        $me = $(this);
        _init = function() {
          var sticky, waypoint_handler;
          waypoint_handler = function(direction) {
            if (direction === "down") {
              return $me.addClass("fixed");
            } else {
              return $me.removeClass("fixed");
            }
          };
          return sticky = new Waypoint.Sticky({
            element: $me[0]
          });
        };
        return _init();
      });
    };
  });

  _docReady = function(evt) {
    var framework, site;
    if ($.CustomEvents != null) {
      jQuery.extend($.Events, $.CustomEvents);
    }
    if ($.CustomMessages != null) {
      jQuery.extend($.Messages, $.CustomMessages);
    }
    if (window.custom_defaults != null) {
      jQuery.extend(window.defaults, window.custom_defaults);
    }
    framework = $('body').Framework("CCHGolden", defaults);
    return site = $('body').Site("CCHGolden", defaults);
  };

  $(document).ready(_docReady);

}).call(this);
